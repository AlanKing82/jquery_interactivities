var _Debug = !1,
    _Offline = !0,
    _NoError = 0,
    _GeneralException = 101,
    _ServerBusy = 102,
    _InvalidArgumentError = 201,
    _ElementCannotHaveChildren = 202,
    _ElementIsNotAnArray = 203,
    _NotInitialized = 301,
    _NotImplementedError = 401,
    _InvalidSetValue = 402,
    _ElementIsReadOnly = 403,
    _ElementIsWriteOnly = 404,
    _IncorrectDataType = 405,
    __CriticalErrorCodes = /^[13]/,
    apiHandle = null,
    API = null,
    findAPITries = 0,
    afterLmsFinish = !1,
    startDate, exitPageStatus, preventAlert = !1;

function messageAlert(a) {
    !1 != _Offline || preventAlert || (preventAlert = !0, alert("== PROBLEM SUBMITTING PAGE ==\n\nThere appears to have been a problem submitting your progress during this course. Please close the course window and launch once again. \n\nTechnical details:\n" + a))
}

function doLMSInitialize() {
    var a = getAPIHandle();
    if (null == a) return messageAlert("Unable to locate the LMS's API Implementation.\nLMSInitialize was not successful."), "false";
    a = a.LMSInitialize("");
    "true" != a.toString() && ErrorHandler();
    return a.toString()
}

function doLMSFinish() {
    if (afterLmsFinish) return "true";
    var a = getAPIHandle();
    if (null == a) return messageAlert("Unable to locate the LMS's API Implementation.\nLMSFinish was not successful."), "false";
    computeTime();
    a = a.LMSFinish("");
    "true" != a.toString() ? ErrorHandler() : afterLmsFinish = !0;
    return a.toString()
}

function doLMSGetValue(a) {
    var b = getAPIHandle();
    if (null == b) return messageAlert("Unable to locate the LMS's API Implementation.\nLMSGetValue was not successful."), "";
    a = b.LMSGetValue(a);
    var c = b.LMSGetLastError().toString();
    return c != _NoError ? (_ShowError(c, b), "") : a.toString()
}

function doLMSSetValue(a, b) {
    var c = getAPIHandle();
    null == c ? messageAlert("Unable to locate the LMS's API Implementation.\nLMSSetValue was not successful.") : "true" != c.LMSSetValue(a, b).toString() && ErrorHandler()
}

function doLMSCommit() {
    var a = getAPIHandle();
    if (null == a) return messageAlert("Unable to locate the LMS's API Implementation.\nLMSCommit was not successful."), "false";
    a = a.LMSCommit("");
    "true" != a && ErrorHandler();
    return a.toString()
}

function doLMSGetLastError() {
    var a = getAPIHandle();
    return null == a ? (messageAlert("Unable to locate the LMS's API Implementation.\nLMSGetLastError was not successful."), _GeneralError) : a.LMSGetLastError().toString()
}

function doLMSGetErrorString(a) {
    var b = getAPIHandle();
    null == b && messageAlert("Unable to locate the LMS's API Implementation.\nLMSGetErrorString was not successful.");
    return b.LMSGetErrorString(a).toString()
}

function doLMSGetDiagnostic(a) {
    var b = getAPIHandle();
    null == b && messageAlert("Unable to locate the LMS's API Implementation.\nLMSGetDiagnostic was not successful.");
    return b.LMSGetDiagnostic(a).toString()
}

function LMSIsInitialized() {
    var a = getAPIHandle();
    if (null == a) return messageAlert("Unable to locate the LMS's API Implementation.\nLMSIsInitialized() failed."), !1;
    a.LMSGetValue("cmi.core.student_name");
    return a.LMSGetLastError().toString() == _NotInitialized ? !1 : !0
}

function ErrorHandler() {
    var a = getAPIHandle();
    if (null == a) messageAlert("Unable to locate the LMS's API Implementation.\nCannot determine LMS error code.");
    else {
        var b = a.LMSGetLastError().toString();
        b != _NoError && _ShowError(b, a);
        return b
    }
}

function _ShowError(a, b) {
    var c = a + ": " + b.LMSGetErrorString(a);
    !0 == _Debug && (c = c + "\n" + b.LMSGetDiagnostic(null));
    (!0 == _Debug || __CriticalErrorCodes.test(a)) && messageAlert(c)
}

function getAPIHandle() {
    null == apiHandle && (apiHandle = getAPI());
    return apiHandle
}

function findAPI(a) {
    for (; null == a.API && null != a.parent && a.parent != a;) {
        findAPITries++;
        if (7 < findAPITries) return messageAlert("Error finding API -- too deeply nested."), null;
        a = a.parent
    }
    return a.API
}

function getAPI() {
    var a = findAPI(window);
    null != a && "undefined" != a || null == window.opener || "undefined" == typeof window.opener || (a = findAPI(window.opener));
    null != a && "undefined" != a || null == top.opener || (a = findAPI(top.opener));
    null != a && "undefined" != a || messageAlert("Unable to find an API adapter");
    return a
}

function loadPage() {
    LMSIsInitialized() || doLMSInitialize();
    "not attempted" == doLMSGetValue("cmi.core.lesson_status") && doLMSSetValue("cmi.core.lesson_status", "incomplete");
    exitPageStatus = !1;
    startTimer()
}

function startTimer() {
    null == parent.playerSessionTimer && (parent.playerSessionTimer = (new Date).getTime());
    startDate = parent.playerSessionTimer
}

function computeTime() {
    if (0 != startDate) var a = ((new Date).getTime() - startDate) / 1E3,
    a = convertTotalSeconds(a);
    else a = "00:00:00.0";
    doLMSSetValue("cmi.core.session_time", a)
}

function doBack() {
    doLMSSetValue("cmi.core.exit", "suspend");
    computeTime();
    exitPageStatus = !0;
    doLMSCommit();
    doLMSFinish()
}

function doContinue(a) {
    doLMSSetValue("cmi.core.exit", "");
    var b = doLMSGetValue("cmi.core.lesson_mode");
    "review" != b && "browse" != b && doLMSSetValue("cmi.core.lesson_status", a);
    computeTime();
    exitPageStatus = !0;
    doLMSCommit();
    doLMSFinish()
}

function doQuit(a) {
    afterLmsFinish || computeTime();
    exitPageStatus = !0;
    null == a || afterLmsFinish || doLMSSetValue("cmi.core.lesson_status", a);
    doLMSFinish()
}

function unloadPage(a) {
    !0 != exitPageStatus && doQuit(a)
}

function convertTotalSeconds(a) {
    var b = a % 60;
    a -= b;
    var c = a % 3600;
    a -= c;
    var b = Math.round(100 * b) / 100,
        d = b = new String(b),
        f = ""; - 1 != b.indexOf(".") && (d = b.substring(0, b.indexOf(".")), f = b.substring(b.indexOf(".") + 1, b.length));
    2 > d.length && (d = "0" + d);
    b = d;
    f.length && (b = b + "." + f);
    a = 0 != a % 3600 ? 0 : a / 3600;
    c = 0 != c % 60 ? 0 : c / 60;
    2 > (new String(a)).length && (a = "0" + a);
    2 > (new String(c)).length && (c = "0" + c);
    return a + ":" + c + ":" + b
};
var studentScore = 0,
    currentScreenNo = 1,
    currentLessonNo, noOfLessons, autobookmarking = 0,
    lessonFolder;
currentAnswer = 0;
var lessonMessage = !1,
    questionNumber = 0,
    answerStatus = "",
    questionDateTime = "",
    questionTime = "",
    answerDateTime = "",
    answerTime = "",
    latency = "",
    answerPattern = "",
    currentAnswerText = "",
    developmentMode = !0,
    olas2Config = null,
    SCORMStrictMode = "auto";
getContentFolderName();
var nextButton = "",
    prevButton = "",
    isSingleSco = "lessonFrame" == window.name || location.href.indexOf("player.html");

function SetOpacity(a, b) {
    var c = b;
    100 < b ? b = c = 100 : 0 > b && (b = c = 0);
    1 > b && (b = 1);
    a.style.opacity = c / 100;
    a.style.filter = "alpha(opacity=" + b + ")"
}

function toggleButton(a, b) {
    var c = document.getElementById(a + "_link");
    if (c) {
        var d = 20,
            f = "false";
        b && (d = 100, f = "true");
        SetOpacity(c, d);
        c.onclick = new Function("return " + f + ";")
    }
}

function disable(a) {
    nextButton && toggleButton("next", !1);
    "undefined" != typeof a && a && prevButton && toggleButton("prev", !1)
}

function enable(a) {
    nextButton && toggleButton("next", !0);
    "undefined" != typeof a && a && prevButton && toggleButton("prev", !0)
}

function pause() {
    frames.myFrame.activity || setTimeout("enable();", 1E3)
}

function getOlasConfigValue(a) {
    if (null == olas2Config) {
        var b = doLMSGetValue("cmi.launch_data");
        olas2Config = 0 < b.length && "olas2Mode" == b.substr(0, 9) ? eval("(" + b.substr(b.indexOf("{")) + ")") : !1
    }
    return !1 == olas2Config ? "scormInteractions" == a ? 1 : null : eval("olas2Config." + a)
}

function initialize() {
    $("#myFrame").attr("allowTransparency", "true");
    developmentMode && parent.initDevNavigation(noOfScreens);
    nextButton = document.getElementById("next_link");
    var a = document.getElementById("prev_link");
    a && (prevButton = a);
    var a = !1,
        b = "undefined" != typeof goodAnswers;
    b ? (loadPage(), a = blockAccess()) : disable();
    a ? blockContent() : (frames.myFrame.location.href = getContentFolderName() + "/" + currentScreenNo + ".htm", b || loadPage(), refreshCounter())
}

function blockContent() {
    document.getElementById("next_link").style.display = "none";
    document.getElementById("submit_link").style.display = "none";
    document.getElementById("exit_link").style.display = "";
    onLastScreen();
    document.getElementById("progress_bar").style.width = "100%";
    frames.myFrame.location.href = getContentFolderName() + "/blocked.htm"
}

function getCurrentTestAttempt(a) {
    var b = doLMSGetValue("cmi.suspend_data");
    b.indexOf(",") && (b = b.split(",")[0]);
    b = parseInt(b);
    "undefined" == typeof a && (a = !1);
    isNaN(b) && (b = a ? 0 : 1);
    return b
}

function blockAccess() {
    if (0 == maxTestAttempts) return !1;
    var a = getCurrentTestAttempt();
    doLMSSetValue("cmi.suspend_data", a + 1 + "," + maxTestAttempts);
    return a > maxTestAttempts ? !0 : !1
}

function onFrameLoad() {
    var a = frames.myFrame;
    pause();
    showLessonMessage();
    a = a.holdNav || 0 < $("a#policy-link", a.document).length;
    currentScreenNo != noOfScreens || a || lastScreenCompletion();
    if (parent.useGoogleTranslate) {
        var b = !1;
        $("#whiteBoxWrap, #whiteBox", frames.myFrame.document).each(function() {
            b || (b = "none" === $(this).css("display"))
        });
        b ? setTimeout('loadGoogleTranslate( frames["myFrame"] )', 1700) : loadGoogleTranslate(frames.myFrame)
    }
}

function lastScreenCompletion() {
    $("#next_link").attr("class", "navigationButton buttonExit");
    onLastScreen();
    submitCompletion()
}

function showLessonMessage() {
    if (!1 != lessonMessage) {
        var a = frames.myFrame.document.createElement("div");
        a.setAttribute("id", "endMessage");
        a.innerHTML = lessonMessage;
        frames.myFrame.document.body.appendChild(a);
        frames.myFrame.document.getElementById("endMessage").style.display = "block"
    }
}

function showBookmarkPopup() {
    if (!afterLmsFinish && 0 != doLMSGetValue("cmi.core.lesson_location").length) {
        var a = getLocalTracker(currentLessonNo - 1);
        3 > a.length && !a.indexOf(":") || (a = a.split(":")[1], 0 != a.length && (a = parseInt(a), 1 < a && a <= noOfScreens && confirm(loadBookmarkText) && goToBookmark(a, 1)))
    }
}

function goToBookmark(a, b) {
    var c = 1 == b ? lessonFolder + "/" : "";
    currentScreenNo = a;
    frames.myFrame.location.href = c + currentScreenNo + ".htm";
    refreshCounter()
}

function getContentFolderName() {
    if (void 0 != lessonFolder) return lessonFolder;
    myUrlArr = location.pathname.split("/");
    myFileName = myUrlArr[myUrlArr.length - 1].split(".");
    lessonFolder = myFileName[0];
    currentLessonNo = myFileName[0].split("_")[0];
    return lessonFolder
}

function goNext(a) {
    disable();
    currentScreenNo < noOfScreens ? (autobookmark(), currentScreenNo++, a = "undefined" != typeof a && a ? "" : getContentFolderName() + "/", frames.myFrame.location.href = a + currentScreenNo + ".htm") : top.close();
    refreshCounter()
}

function onLastScreen() {
    var a = document.getElementById("next_link"),
        b = getOlasConfigValue("nextModule"),
        c = "undefined" != typeof goodAnswers,
        d = c && getTestScore() >= pass_rate,
        f = null != b && 1 == olas2Config.linked,
        h = isOpenedInPopup(),
        g = isLastLesson(),
        d = f && (d || !c && g),
        f = "SV" == getOlasConfigValue("linkedType");
    !g || d ? (b = d ? endMessageAssessment.replace(/%linked%/g, f ? congratulationLinkedSurveyHeader : congratulationLinkedAssessmentHeader) : nextLessonButtonAlt, $("#next_link").attr({
            title: b,
            alt: b,
            "class": "navigationButton buttonForward"
        }),
        isSingleSco && (a.href = d ? "javascript: getApiWindow().launchAssessment(" + (f ? "1" : "0") + ");" : "javascript: gotoNextModule()"), d && c ? (document.getElementById("exit_link").style.display = "none", a.style.display = "") : a.target = "_parent", lessonMessage = !1) : h ? ($("#" + (c ? "exit_link" : "next_link")).attr({
        alt: exitButtonAlt,
        title: exitButtonAlt
    }), c || (lessonMessage = endMessageFrame)) : (a = c ? "exit_link" : "next_link", null != b ? (b = "javascript:" + (getIPlayer() ? "getIPlayer().end()" : "$( '#mobileCloseWin a', parent.parent.document ).get(0).click()") +
        ";", c = "buttonExit") : (b = "#", c = "buttonStop"), $("#" + a).replaceWith('<a href="' + b + '" class="navigationButton ' + c + '"></a>'));
    (prevImgRef = document.getElementById("prev_link")) && $("#prev_link").remove()
}

function autobookmark() {
    var a = getLocalTracker(),
        b = a[currentLessonNo - 1].split(":");
    b[1] = currentScreenNo + 1;
    a[currentLessonNo - 1] = b.join(":");
    doLMSSetValue("cmi.core.lesson_location", a.join(","));
    0 != autobookmarking && 0 == currentScreenNo % autobookmarking && doLMSCommit()
}

function goPrev() {
    1 < currentScreenNo && (currentScreenNo--, frames.myFrame.location.href = getContentFolderName() + "/" + currentScreenNo + ".htm", currentScreenNo == noOfScreens - 1 && (document.getElementById("next_link").src = "../../common_images/icon_nex.gif"));
    refreshCounter()
}

function submitAnswer() {
    1 == getOlasConfigValue("scormInteractions") && (answerDateTime = new Date, answerTime = answerDateTime.toTimeString().split(" ")[0], latency = convertTotalSeconds((answerDateTime - questionDateTime) / 1E3));
    if (currentScreenNo <= noOfScreens) {
        if (0 == currentAnswer) {
            alert(missingAnswerWarning);
            return
        }
        if (1 != getOlasConfigValue("scormInteractions"))
            for (var a = 0; a < goodAnswers.length; a++) goodAnswers[a] == Base64.encode(currentAnswer) && studentScore++;
        else {
            var b = Base64.decode(goodAnswers[questionNumber]);
            b == currentAnswer ? (studentScore++, answerStatus = "correct") : answerStatus = "wrong";
            var c = /[^\u0000-\uffff]/g,
                a = questions[questionStack[questionNumber]],
                d;
            for (d in a.answers) {
                var f = __escapeAndLimit(a.answers[d].text, c, 255);
                a.answers[d].id == currentAnswer && (currentAnswerText = f.substr(0, 255 - currentAnswer.toString().length - 1));
                a.answers[d].id == b && (answerPattern = b + "|" + f.substr(0, 255 - b.toString().length - 1))
            }
            doLMSSetValue("cmi.interactions." + parent.interactionCount + ".latency", latency);
            doLMSSetValue("cmi.interactions." +
                parent.interactionCount + ".result", answerStatus);
            doLMSSetValue("cmi.interactions." + parent.interactionCount + ".student_response", currentAnswer + "|" + currentAnswerText);
            doLMSSetValue("cmi.interactions." + parent.interactionCount + ".correct_responses.0.pattern", answerPattern);
            doLMSSetValue("cmi.interactions." + parent.interactionCount + ".time", answerTime);
            doLMSSetValue("cmi.interactions." + parent.interactionCount + ".type", "fill-in");
            b = a.text;
            b = $("<div/>").html(b).text();
            a = a.id;
            doLMSSetValue("cmi.interactions." +
                parent.interactionCount + ".id", a + "_" + __escapeAndLimit(b, /[^\u0021-\u007E]/g, 255 - a.toString().length - 1, "_"));
            parent.interactionCount++
        }
        currentAnswer = 0;
        1 == show_answer && showCorrectAnswer();
        0 == show_answer ? goToNextQuestion() : (document.getElementById("submit_link").style.display = "none", document.getElementById("next_link").style.display = "", isTouch() && iPadFixNavVisibility())
    } else top.close();
    1 == getOlasConfigValue("scormInteractions") && questionNumber++
}

function __escapeAndLimit(a, b, c, d) {
    a = a.replace(/^\s+|\s+$/, "");
    "undefined" != typeof d && (a = a.replace(/[\s+]/g, d));
    return a.replace(b, "").substr(0, c)
}

function submitCompletion(a) {
    "undefined" != typeof goodAnswers ? (doLMSSetValue("cmi.core.score.raw", getTestScore()), getTestScore() >= pass_rate ? (completionStatus = "passed", changeLessonStatus("last", "2")) : (completionStatus = "failed", changeLessonStatus("last", "0"))) : (changeLessonStatus("actual", "2"), completionStatus = "completed");
    doLMSSetValue("cmi.student_preference.language", getPreferredLanguage());
    if ("completed" != completionStatus || isCourseFinished()) {
        doLMSSetValue("cmi.core.lesson_status", completionStatus);
        if ("undefined" == typeof a || a) isSCORMStrictMode() ? doLMSCommit() : doLMSFinish();
        "failed" != completionStatus && enableLinkedAssessment()
    } else doLMSCommit();
    refreshCourseMenu()
}

function getPreferredLanguage() {
    if (parent.useGoogleTranslate) return parent.LANG_USE_GT;
    var a = location.href.match(/lang\/[^\/]+/i);
    return 0 == a.length ? "" : a[0].split("/")[1]
}

function isSCORMStrictMode() {
    "auto" == SCORMStrictMode && (SCORMStrictMode = !1 == olas2Config);
    return SCORMStrictMode
}

function getTestScore() {
    return studentScore / noOfScreens * 100 | 0
}

function getCurrentAnswer(a) {
    var b = 0 === currentAnswer;
    currentAnswer = a;
    b && toggleButton("submit", !0)
}

function getMessage() {
    endButton = {};
    if ("passed" == doLMSGetValue("cmi.core.lesson_status")) {
        var a = getOlasConfigValue("linked");
        1 == a && "undefined" != typeof getApiWindow().launchAssessment ? (endButton.id = "linkedAssessment", endButton.icon = "button_assessment.jpg", a = summaryLinkedContentWording(), endButton.onclick = "parent.getApiWindow().launchAssessment( " + (a ? "1" : "0") + " );") : null != a && (endButton.id = "printCert", endButton.text = endButtonCertDesc);
        frames.myFrame.document.getElementById("message_result").innerHTML =
            "<span class=message_result_correct >" + congratulationHeader + "</span><p>" + congratulationText.replace(/%score%/, getTestScore())
    } else "failed" == doLMSGetValue("cmi.core.lesson_status") ? getCurrentTestAttempt() - 1 != maxTestAttempts || 0 == maxTestAttempts ? (frames.myFrame.document.getElementById("message_result").innerHTML = "<span class=message_result_incorrect>" + sorryHeader + "!</span><p>" + sorryText.replace(/%score%/, getTestScore()).replace(/%required_score%/, pass_rate) + sorryMessage + "</span>", endButton.id = "retake",
        endButton.icon = "button_retake.png", endButton.label = endButtonRetakeLabel, endButton.onclick = "parent.retake();", endButton.text = endButtonRetakeDesc) : frames.myFrame.document.getElementById("message_result").innerHTML = "<span class=message_result_incorrect>" + sorryHeader + "!</span><p>" + sorryText.replace(/%score%/, getTestScore()).replace(/%required_score%/, pass_rate) + sorryFinalMessage + "</span>" : alert(doLMSGetValue("cmi.core.lesson_status"))
}

function summaryLinkedContentWording() {
    var a = "",
        b = "SV" == getOlasConfigValue("linkedType"),
        a = b ? congratulationHeader = congratulationLinkedSurveyHeader : congratulationHeader = congratulationLinkedAssessmentHeader,
        a = a.toLowerCase();
    endButton.text = endButton.label = endMessageAssessment.replace(/%linked%/g, a);
    congratulationText = congratulationLinkedAssessmentText.replace(/%linked%/g, a);
    return b
}

function refreshCounter() {
    currentScreenNo > noOfScreens ? document.getElementById("screen_counter").innerHTML = "" : document.getElementById("screen_counter").innerHTML = currentScreenNo + " / " + noOfScreens;
    progressBarWidth = 100 / noOfScreens * currentScreenNo;
    100 < progressBarWidth && (progressBarWidth = 100);
    document.getElementById("progress_bar").style.width = progressBarWidth + "%"
}

function showCorrectAnswer() {
    for (var a = 0; a < frames.myFrame.document.forms[0].elements.length; a++) answerInput = frames.myFrame.document.forms[0].elements[a], answerNo = a + 1, "radio" == answerInput.type && (Base64.encode(answerInput.value) == goodAnswers[currentScreenNo - 1] ? frames.myFrame.document.getElementById("showAnswer" + answerNo).style.display = "" : answerInput.checked && (frames.myFrame.document.getElementById("showAnswer" + answerNo).innerHTML = '<img src="../../../common_images/cancel.png"/>', frames.myFrame.document.getElementById("showAnswer" +
        answerNo).style.display = ""), answerInput.disabled = !0)
}

function goToNextQuestion() {
    currentScreenNo < noOfScreens ? (currentScreenNo++, frames.myFrame.location.reload(), 1 == show_answer && (document.getElementById("submit_link").style.display = "", document.getElementById("next_link").style.display = "none", isTouch() && iPadFixNavVisibility())) : (frames.myFrame.location.href = getContentFolderName() + "/summary.htm", document.getElementById("next_link").style.display = "none", document.getElementById("submit_link").style.display = "none", document.getElementById("exit_link").style.display =
        "", onLastScreen(), isTouch() && iPadFixNavVisibility(), submitCompletion(!1), currentScreenNo++);
    refreshCounter()
}

function displayQuestion() {
    1 == getOlasConfigValue("scormInteractions") && (questionDateTime = new Date, questionTime = questionDateTime.toTimeString().split(" ")[0]);
    toggleButton("submit", !1);
    question = getQuestion();
    frames.myFrame.document.getElementById("questionText").innerHTML = currentScreenNo + ". " + question.text;
    for (var a = 0; a < question.answers.length; a++) displayAnswer(question.answers[a]);
    parent.useGoogleTranslate && loadGoogleTranslate(frames.myFrame)
}

function tableRowOver(a, b) {
    "undefined" == typeof b && (b = !1);
    a.parentNode.parentNode.className = "answer_row" + (b ? "_hover" : "")
}

function displayAnswer(a) {
    table = frames.myFrame.document.getElementById("resultsTable");
    newRow = table.insertRow(table.rows.length);
    answerNo = table.rows.length - 1;
    newRow.className = "answer_row";
    c1 = newRow.insertCell(0);
    c2 = newRow.insertCell(1);
    c1.className = "cell_radio_answer";
    c2.className = "cell_answer_text";
    c1.innerHTML = '<div id="showAnswer' + answerNo + '" class="correctAnswer" style="display: none"><img src="../../../common_images/ok.png"/></div><label for=user_answer></label><input onclick="javascript:parent.getCurrentAnswer(value);" class="radio" id=user_answer_' + answerNo +
        ' type="radio" name="user_answer" value="' + a.id + '">';
    c2.innerHTML = '<label for="user_answer_' + answerNo + '" class="answer_text" onmouseover="parent.tableRowOver(this,true)" onmouseout="parent.tableRowOver(this,false)">' + a.text + "</label>"
}

function getQuestion() {
    0 == questionStack.length && initQuestions();
    return questions[questionStack[currentScreenNo - 1]]
}

function initQuestions() {
    if (0 == random_select)
        for (i = 0; i < goodAnswers.length; i++) questionStack[i] = i;
    else {
        newGoodAnswers = [];
        noOfNotRequiredQuestion = 0;
        nr_questions_for_display > goodAnswers.length && (nr_questions_for_display = goodAnswers.length);
        for (i = noOfRequiredQuestions = 0; i < questions.length; i++) questions[i].required && noOfRequiredQuestions++;
        noOfRequiredQuestions < nr_questions_for_display && (noOfNotRequiredQuestion = nr_questions_for_display - noOfRequiredQuestions);
        questionIndexes = Array(questions.length);
        for (i =
            0; i < questions.length; i++) questionIndexes[i] = i;
        for (hasRemovedNotRequiredQuestions = !1; questionStack.length < nr_questions_for_display;) {
            if (!hasRemovedNotRequiredQuestions && 0 >= noOfNotRequiredQuestion) {
                for (i = 0; i < questionIndexes.length; i++) questions[questionIndexes[i]].required || (questionIndexes.splice(i, 1), i--);
                hasRemovedNotRequiredQuestions = !0
            }
            randomNumber = Math.floor(Math.random() * questionIndexes.length);
            pickedQuestionIndex = questionIndexes[randomNumber];
            questionIndexes.splice(randomNumber, 1);
            questionStack.push(pickedQuestionIndex);
            newGoodAnswers.push(goodAnswers[pickedQuestionIndex]);
            questions[pickedQuestionIndex].required || noOfNotRequiredQuestion--
        }
        goodAnswers = newGoodAnswers
    }
}

function isOpenedInPopup() {
    if ("undefined" === typeof closeScoCounter) closeScoCounter = 0, closeScoRef = window;
    else if (2 < ++closeScoCounter) return !1;
    if ("undefined" !== typeof closeScoRef.opener && closeScoRef.opener) return !0;
    if ("undefined" === typeof closeScoRef.parent || !closeScoRef.parent) return closeScoCounter = 3, !1;
    closeScoRef = closeScoRef.parent;
    return isOpenedInPopup()
}

function openLesson(a, b, c) {
    var d = getLocalTracker();
    if (c) {
        for (var f = c = 0; f < d.length; f += 1) c += parseInt(d[f].charAt(0));
        if (c >= 2 * (d.length - 1)) {
            if (!validateAttemptsLimit()) return refreshCourseMenu(), !1;
            changeLessonStatus(a, "1");
            currentLessonNo = a;
            window.lessonFrame.exitPageStatus = !0;
            window.lessonFrame.location.href = b;
            refreshCourseMenu()
        } else alert(window.lessonFrame.prerequisitesMessageiPlayer)
    } else checkPrerequisites(a, d) ? (changeLessonStatus(a, "1"), currentLessonNo = a, window.lessonFrame.exitPageStatus = !0,
        window.lessonFrame.location.href = b, refreshCourseMenu()) : alert(window.lessonFrame.prerequisitesMessageiPlayer);
    return !1
}

function validateAttemptsLimit() {
    if (0 == maxTestAttempts) return !0;
    var a = getCurrentTestAttempt();
    if (a != maxTestAttempts) return !0;
    "undefined" == typeof maxAttemptsWarning && (maxAttemptsWarning = parent.maxAttemptsWarning);
    var b = maxAttemptsWarning.replace(/%maxAttempt%/, maxTestAttempts),
        b = b.replace(/%currentAttempt%/, a);
    return confirm(b)
}

function checkPrerequisites(a, b) {
    if (1 == a || !1 == prerequisitesMode) return !0;
    for (var c = 0; c < a - 1; c++)
        if (2 > parseInt(b[c].charAt(0))) return !1;
    return !0
}

function changeLessonStatus(a, b) {
    var c = getLocalTracker();
    "actual" == a && (a = currentLessonNo);
    "last" == a && (a = c.length);
    "2" != getLessonStatus(a) && ("not attempted" == b && (b = 0), "incomplete" == b && (b = 1), "completed" == b && (b = 2), "passed" == b && (b = 2), "failed" == b && (b = 1), c[a - 1] = c[a - 1].setCharAt(0, b), getPlayerWindow().frames.lessonFrame.afterLmsFinish || doLMSSetValue("cmi.core.lesson_location", c.join(",")))
}

function getLessonStatus(a) {
    return getLocalTracker(a - 1).charAt(0)
}

function isCourseFinished() {
    var a = 0,
        b = getLocalTracker();
    if (null !== b) {
        for (var c = 0; c < b.length; c += 1) a += parseInt(b[c].charAt(0));
        return a >= 2 * b.length ? !0 : !1
    }
    return !1
}

function getStartLesson() {
    for (var a = getLocalTracker(), b = 1, c = 0; c < a.length; c += 1) {
        var d = parseInt(a[c].charAt(0));
        if (1 == d || 0 == d) {
            b = c < a.length ? c + 1 : c;
            break
        }
    }
    0 < maxTestAttempts && $("#lesson" + b).hasClass("test") && 0 < getCurrentTestAttempt() && (b = 1 == b ? 1 : b - 1);
    return b
}

function initLocalTracker(a) {
    var b = doLMSGetValue("cmi.core.lesson_location");
    noOfLessons = a;
    if (0 == b.length) {
        for (var c = 0; c < a; c++) b += "0:1,";
        b = b.substr(0, b.length - 1);
        doLMSSetValue("cmi.core.lesson_location", b)
    }
    courseStatuses = b.split(",");
    showLinkedAssessmentItem()
}

function getLocalTracker(a) {
    var b = "lessonFrame" == window.name ? parent : window;
    return "undefined" != typeof a ? b.courseStatuses[a] : b.courseStatuses
}
String.prototype.setCharAt = function(a, b) {
    return a > this.length - 1 ? str : this.substr(0, a) + b + this.substr(a + 1)
};

function refreshCourseMenu() {
    for (var a = getLocalTracker(), b = 0; b < a.length; b += 1) {
        var c = a[b].charAt(0);
        "0" == c && getPlayerWindow().$("#lesson" + (b + 1)).addClass("notStarted");
        "1" == c && getPlayerWindow().$("#lesson" + (b + 1)).addClass("inProgress");
        "2" == c && (c = getPlayerWindow().$("#lesson" + (b + 1)).addClass("completed"), b != a.length - 1 || c.hasClass("disabled") || c.attr("href", "javascript:void(0);").addClass("disabled").removeClass("notStarted inProgress").removeAttr("onclick").find("span").addClass("disabled"))
    }
    $(".currentItem").remove();
    getPlayerWindow().$("#lesson" +
        currentLessonNo).after("<div class='currentItem'></div>")
}

function enableLinkedAssessment() {
    1 == getOlasConfigValue("linked") && getPlayerWindow().$("#lesson-la").css("display", "block")
}

function getPlayerWindow() {
    return "lessonFrame" == window.name ? parent : window
}

function openLinkedAssessment() {
    var a = "SV" == getOlasConfigValue("linkedType");
    if (!isCourseFinished()) {
        var b = getPlayerWindow();
        alert(b.prerequisitesLinkedAssessmentMessageiPlayer.replace(/%linked%/g, (a ? b.surveyLabel : b.assessmentLabel).toLowerCase()));
        return !1
    }
    getApiWindow().launchAssessment(a);
    return !0
}

function showLinkedAssessmentItem() {
    1 != getOlasConfigValue("linked") && getPlayerWindow().$("#lesson-la").remove();
    lessonTitle = "SV" == getOlasConfigValue("linkedType") ? surveyLabel : assessmentLabel;
    getPlayerWindow().$("#lesson-la").css("display", "block").text(lessonTitle)
}

function getIPlayer() {
    return window.opener ? !1 : "undefined" != typeof parent.parent.fb ? parent.parent.fb : parent.parent.parent.fb
}

function getApiWindow() {
    return window.opener && window.opener.API ? window.opener : parent.opener && parent.opener.API ? parent.opener : parent.parent && parent.parent.API ? parent.parent : parent
}

function gotoNextModule() {
    getPlayerWindow().$("#lesson" + parseInt(parseInt(currentLessonNo) + 1)).click()
}

function isLastLesson() {
    return "test" == currentLessonNo || currentLessonNo == getLocalTracker().length
}

function addJs(a, b) {
    e = b.createElement("script");
    e.async = !0;
    e.type = "text/javascript";
    e.src = a;
    b.body.appendChild(e)
}

function loadGoogleTranslate(a, b) {
    "undefined" == typeof b && (b = ("myFrame" == a.name ? "../" : "") + "../../");
    addJs(b + "SCOFunctions/googletranslate.js?v=" + getPlayerWindow().GOOGLE_TRANSLATE_VERSION, a.document)
}

function initDevNavigation(a) {
    var b = $("#developerToolbox");
    b.empty();
    var c = b.append('<div id="dtScreenNav"></div>');
    for (i = 1; i <= a; i++) c.append("<a href=\"javascript: frames['lessonFrame'].goToBookmark( " + i + ',1 );">' + i + "</a> | ");
    b.show()
}

function onSummaryLoad() {
    getMessage();
    showLessonMessage();
    "passed" == doLMSGetValue("cmi.core.lesson_status") ? isSCORMStrictMode() ? doLMSCommit() : doLMSFinish() : "failed" == doLMSGetValue("cmi.core.lesson_status") && (isLastAttempt() ? doLMSFinish() : doLMSCommit());
    showButton();
    var a = getIPlayer();
    "printCert" == endButton.id && a && (now = new Date, a.loadPageOnCloseTarget = "center-iframe", a.loadPageOnClose = a.win.frames["center-iframe"].location.href + "/nocert:1/nocache:" + now.getTime());
    parent.useGoogleTranslate && loadGoogleTranslate(window)
}

function isLastAttempt() {
    return getCurrentTestAttempt() - 1 == maxTestAttempts && 0 != maxTestAttempts ? !0 : !1
}

function retake() {
    if (validateAttemptsLimit()) {
        var a = window.location.href,
            a = a.replace("?init=0", "?init=1");
        window.exitPageStatus = !0;
        window.location = a
    }
}

function showButton() {
    var a = frames.myFrame.document.getElementById("endButton"),
        b = '<a id="iplayerCloseButton" href="javascript: parent.closeIPlayer(false);" class="regular" title="' + exitButtonAlt + '"><img src="../../../common_images/button_exit.png" alt="' + exitButtonAlt + '"/>' + exitButtonAlt + "</a>";
    "printCert" == endButton.id ? a.innerHTML = '<a id="' + endButton.id + '" href="' + olas2Config.webroot + 'lmm_completions/printCertificate/" onclick="parent.closeIPlayer(); return true;" class="regular" title="' + endButtonCertLabel +
        '" target="_blank"><img src="../../../common_images/button_cert.png" alt="' + endButtonCertLabel + '"/>' + endButtonCertLabel + "</a>" : void 0 != endButton.id && (a.innerHTML = '<a id="' + endButton.id + '" href="javascript:' + endButton.onclick + '" class="regular" title="' + endButton.label + '"><img src="../../../common_images/' + endButton.icon + '" alt="' + endButton.label + '"/>' + endButton.label + "</a>");
    "printCert" == endButton.id && (a.innerHTML += b);
    void 0 != endButton.text && (frames.myFrame.document.getElementById("endButtonMsg").innerHTML =
        endButton.text);
    a.style.width = "printCert" == endButton.id ? "70%" : "retake" == endButton.id ? "30%" : "60%"
}

function closeIPlayer(a) {
    "undefined" == typeof a && (a = !0);
    var b = "top.close()";
    getIPlayer() ? b = "getIPlayer().end()" : 0 < parent.$("#mobileCloseWin a", parent.parent.document).length && (b = "$( '#mobileCloseWin a', parent.parent.document ).get(0).click()");
    a ? setTimeout(b, 1500) : eval(b)
};